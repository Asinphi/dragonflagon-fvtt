import { BezierTool, ToolMode } from './BezierTool.js';
import { PointArrayInputHandler, PointInputHandler, InitializerInputHandler } from "./ToolInputHandler.js";
const pointNearPoint = BezierTool.pointNearPoint;
class InitializerIH extends InitializerInputHandler {
	constructor(tool, success, fail) {
		super(tool.lineA, tool.lineB, success, fail);
		this.tool = tool;
	}
	move(origin, destination, event) {
		super.move(origin, destination, event);
		var dx = this.tool.lineB.x - this.tool.lineA.x;
		var dy = this.tool.lineB.y - this.tool.lineA.y;
		const length = Math.sqrt((dx * dx) + (dy * dy));
		dx *= 0.5;
		dy *= 0.5;
		this.tool.control.set(this.tool.lineA.x + dx + dy, this.tool.lineA.y + dy - dx);
	}
}
export default class QuadTool extends BezierTool {
	constructor() {
		super(...arguments);
		this.lineA = new PIXI.Point();
		this.lineB = new PIXI.Point();
		this.control = new PIXI.Point();
	}
	get handles() { return [this.lineA, this.control, this.lineB]; }
	get bounds() {
		const b = new PIXI.Bounds();
		b.addPoint(this.lineA);
		b.addPoint(this.lineB);
		b.addPoint(this.control);
		return b;
	}
	get polygon() { return new PIXI.Polygon([this.lineA, this.lineB, this.control]); }
	initialPoints() { return [0, 0, 0, 0, 0, 0]; }
	drawHandles(context) {
		if (this.mode == ToolMode.NotPlaced)
			return;
		this.drawBoundingBox(context);
		context.beginFill(0xffaacc)
			.lineStyle(BezierTool.LINE_SIZE, 0xffaacc, 1, 0.5)
			.moveTo(this.lineA.x, this.lineA.y)
			.lineTo(this.control.x, this.control.y)
			.moveTo(this.lineB.x, this.lineB.y)
			.lineTo(this.control.x, this.control.y)
			.endFill();
		super.drawSegmentLabel(context);
		this.drawHandle(context, 0xff4444, this.lineA);
		this.drawHandle(context, 0xff4444, this.lineB);
		this.drawHandle(context, 0xaaff44, this.control);
	}
	checkPointForDrag(point) {
		if (this.mode == ToolMode.NotPlaced) {
			this.setMode(ToolMode.Placing);
			return new InitializerIH(this, () => this.setMode(ToolMode.Placed), () => this.setMode(ToolMode.NotPlaced));
		}
		if (pointNearPoint(point, this.lineA, BezierTool.HANDLE_RADIUS))
			return new PointInputHandler(this.lineA);
		else if (pointNearPoint(point, this.lineB, BezierTool.HANDLE_RADIUS))
			return new PointInputHandler(this.lineB);
		else if (pointNearPoint(point, this.control, BezierTool.HANDLE_RADIUS))
			return new PointInputHandler(this.control);
		else if (this.polygon.contains(point.x, point.y))
			return new PointArrayInputHandler(point, this.handles);
		return null;
	}
	getTools() { return []; }
	showTools() { }
	hideTools() { }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
