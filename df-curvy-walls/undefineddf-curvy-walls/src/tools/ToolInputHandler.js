export class InputHandler {
	static finalPoint(point, snap = true) {
		return canvas.walls /*WallsLayer*/._getWallEndpointCoordinates(point, { snap: snap });
	}
	get walls() { return canvas.walls; }
	shouldSnap(event) {
		const { originalEvent } = event.data;
		return this.walls /*WallsLayer*/._forceSnap || !originalEvent.shiftKey;
	}
	getWallEndPoint(origin, snap) {
		// Determine the starting coordinates
		return new PIXI.Point(...this.walls /*WallsLayer*/._getWallEndpointCoordinates(origin, { snap }));
	}
}
export class InitializerInputHandler extends InputHandler {
	constructor(lineA, lineB, success, fail) {
		super();
		this.lineA = lineA;
		this.lineB = lineB;
		this.success = success;
		this.fail = fail;
	}
	start(origin, destination, event) {
		const snap = this.shouldSnap(event);
		this.lineA.copyFrom(this.getWallEndPoint(origin, snap));
		this.lineB.copyFrom(this.getWallEndPoint(destination, snap));
	}
	move(_origin, destination, event) {
		this.lineB.copyFrom(this.getWallEndPoint(destination, this.shouldSnap(event)));
	}
	stop(_origin, destination, event) {
		this.lineB.copyFrom(this.getWallEndPoint(destination, this.shouldSnap(event)));
		this.success();
	}
	cancel() {
		this.fail();
	}
}
export class PointInputHandler extends InputHandler {
	constructor(point, completion = null) {
		super();
		this.originalPoint = new PIXI.Point(0, 0);
		this.completion = null;
		this.originalPoint.copyFrom(point);
		this.point = point;
		this.completion = completion;
	}
	start(_origin, destination, event) {
		this.move(null, destination, event);
	}
	move(_origin, destination, event) {
		this.point.copyFrom(this.getWallEndPoint(destination, this.shouldSnap(event)));
	}
	stop(_origin, destination, event) {
		this.point.copyFrom(this.getWallEndPoint(destination, this.shouldSnap(event)));
		if (this.completion != null)
			this.completion(this);
	}
	cancel() {
		this.point.copyFrom(this.originalPoint);
		if (this.completion != null)
			this.completion(this);
	}
}
export class PointArrayInputHandler extends InputHandler {
	constructor(start, points, completion = null) {
		super();
		this.originalPoints = [];
		points.forEach(e => this.originalPoints.push(e.clone()));
		this.points = points;
		this._start = start;
		this.completion = completion;
	}
	moveAll(to, event) {
		const delta = new PIXI.Point(to.x - this._start.x, to.y - this._start.y);
		const snap = this.shouldSnap(event);
		var o;
		this.points.forEach((e, i) => {
			o = this.originalPoints[i];
			e.copyFrom(this.getWallEndPoint(new PIXI.Point(o.x + delta.x, o.y + delta.y), snap));
		});
	}
	start(_origin, destination, event) {
		this.moveAll(destination, event);
	}
	move(_origin, destination, event) {
		this.moveAll(destination, event);
	}
	stop(_origin, destination, event) {
		this.moveAll(destination, event);
		if (this.completion != null)
			this.completion(this);
	}
	cancel() {
		this.originalPoints.forEach((e, i) => e.copyTo(this.points[i]));
		if (this.completion != null)
			this.completion(this);
	}
}
export class MagnetPointInputHandler extends InputHandler {
	constructor(masterPoint, slavePoint, completion = null) {
		super();
		this.originalPoint = new PIXI.Point(0, 0);
		this.completion = null;
		this.originalPoint.copyFrom(masterPoint);
		this.masterPoint = masterPoint;
		this.slavePoint = slavePoint;
		this.offsetX = slavePoint.x - masterPoint.x;
		this.offsetY = slavePoint.y - masterPoint.y;
		this.completion = completion;
	}
	start(_origin, destination, event) {
		this.move(null, destination, event);
	}
	move(_origin, destination, event) {
		this.masterPoint.copyFrom(this.getWallEndPoint(destination, this.shouldSnap(event)));
		this.slavePoint.set(this.masterPoint.x + this.offsetX, this.masterPoint.y + this.offsetY);
	}
	stop(_origin, destination, event) {
		this.masterPoint.copyFrom(this.getWallEndPoint(destination, this.shouldSnap(event)));
		this.slavePoint.set(this.masterPoint.x + this.offsetX, this.masterPoint.y + this.offsetY);
		if (this.completion != null)
			this.completion(this);
	}
	cancel() {
		this.masterPoint.copyFrom(this.originalPoint);
		this.slavePoint.set(this.masterPoint.x + this.offsetX, this.masterPoint.y + this.offsetY);
		if (this.completion != null)
			this.completion(this);
	}
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
