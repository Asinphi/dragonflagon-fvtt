import { Bezier } from "../lib/bezier.js";
export var ToolMode;
(function (ToolMode) {
	ToolMode[ToolMode["NotPlaced"] = 0] = "NotPlaced";
	ToolMode[ToolMode["Placing"] = 1] = "Placing";
	ToolMode[ToolMode["Placed"] = 2] = "Placed";
})(ToolMode || (ToolMode = {}));
export class BezierTool {
	constructor() {
		this._mode = ToolMode.NotPlaced;
		this.lastSegmentFetch = [];
		this.bezier = new Bezier(this.initialPoints());
	}
	get lineCenter() {
		return new PIXI.Point(this.lineA.x + ((this.lineB.x - this.lineA.x) / 2), this.lineA.y + ((this.lineB.y - this.lineA.y) / 2));
	}
	get mode() { return this._mode; }
	;
	setMode(value) {
		this._mode = value;
		if (this._mode == ToolMode.Placed) {
			$(`button[data-tool="bezierapply"]`).show();
			$(`button[data-tool="beziercancel"]`).show();
			this.showTools();
		}
		else {
			$(`button[data-tool="bezierapply"]`).hide();
			$(`button[data-tool="beziercancel"]`).hide();
			this.hideTools();
		}
	}
	;
	getSegments(count) {
		if (this.mode == ToolMode.NotPlaced)
			return [];
		this.bezier.points = this.handles;
		this.bezier.update();
		return (this.lastSegmentFetch = this.bezier.getLUT(count + 2).map((e) => new PIXI.Point(e.x, e.y)));
	}
	clearTool() {
		this.setMode(ToolMode.NotPlaced);
	}
	static createText(text) {
		const result = new PreciseText(text, BezierTool.TEXT_STYLE);
		result.anchor.set(0.5, 0.5);
		return result;
	}
	drawSegmentLabel(context) {
		const text = BezierTool.createText(`‚ä∑${this.lastSegmentFetch.length - 1}`);
		text.position = this.lineCenter;
		context.addChild(text);
	}
	drawBoundingBox(context) {
		const bounds = this.bounds.getRectangle(PIXI.Rectangle.EMPTY);
		context.beginFill(0, 0)
			.lineStyle(BezierTool.LINE_SIZE, 0xE88D2D, 1, 0.5)
			.drawRoundedRect(bounds.left - 10, bounds.top - 10, bounds.width + 20, bounds.height + 20, 10)
			.endFill();
	}
	drawHandle(context, fill, point) {
		return context.beginFill(fill, 1)
			.lineStyle(BezierTool.LINE_SIZE, 0x0, 1, 0.5)
			.drawCircle(point.x, point.y, BezierTool.HANDLE_RADIUS)
			.endFill();
	}
	static pointNearPoint(a, b, threshold) {
		var x = a.x - b.x;
		var y = a.y - b.y;
		return ((x * x) + (y * y)) <= (threshold * threshold); // super simple and efficient Squared Length circle collision
	}
}
BezierTool.HANDLE_RADIUS = 6;
BezierTool.LINE_SIZE = 2;
// Define the text style
BezierTool.TEXT_STYLE = new PIXI.TextStyle({
	fontFamily: CONFIG.defaultFontFamily,
	fontSize: 24,
	fill: "#BBBBBB",
	stroke: "#111111",
	strokeThickness: 1,
	dropShadow: false,
	dropShadowColor: "#000000",
	dropShadowBlur: Math.max(Math.round(24 / 16), 2),
	dropShadowAngle: 0,
	dropShadowDistance: 0,
	padding: 1
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
