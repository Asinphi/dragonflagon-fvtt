var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	return new (P || (P = Promise))(function (resolve, reject) {
		function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
		function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
		function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
import { ToolMode } from './tools/BezierTool.js';
import CircleTool from './tools/CircleTool.js';
import CubicTool from './tools/CubicTool.js';
import QuadTool from './tools/QuadTool.js';
export var Mode;
(function (Mode) {
	Mode[Mode["None"] = 0] = "None";
	Mode[Mode["Cube"] = 1] = "Cube";
	Mode[Mode["Quad"] = 2] = "Quad";
	Mode[Mode["Circ"] = 3] = "Circ";
})(Mode || (Mode = {}));
function unsetTool(name) {
	var _a;
	(_a = BezierControl.findTool(name, "walls")) === null || _a === void 0 ? true : delete _a.active;
	ui.controls.render();
}
const MODE_NAMES = {};
MODE_NAMES[Mode.None] = 'undefined';
MODE_NAMES[Mode.Quad] = 'bezierquad';
MODE_NAMES[Mode.Cube] = 'beziercube';
MODE_NAMES[Mode.Circ] = 'beziercirc';
const unsetters = {};
unsetters[Mode.None] = () => { };
unsetters[Mode.Quad] = () => unsetTool(MODE_NAMES[Mode.Quad]);
unsetters[Mode.Cube] = () => unsetTool(MODE_NAMES[Mode.Cube]);
unsetters[Mode.Circ] = () => unsetTool(MODE_NAMES[Mode.Circ]);
export class BezierControl {
	constructor() {
		this.inputManager = new KeyboardInputManager();
		this._mode = Mode.None;
		this.walls = [];
		this.currentHandler = null;
		this._activeTool = null;
		this._segments = 10;
	}
	get segments() { return this._segments; }
	set segments(value) {
		this._segments = Math.clamped(value, 1, 64);
		if (this.mode != Mode.None)
			this.render();
	}
	get activeTool() { return this._activeTool; }
	static get instance() {
		return this._instance || (this._instance = new this());
	}
	get mode() { return this._mode; }
	setMode(enabled, mode) {
		this.clearTool();
		if (enabled) {
			unsetters[this._mode]();
			this._mode = mode;
			this.wallsLayer.preview.sortableChildren = true;
			this.render();
		}
		else {
			if (this._mode != mode)
				return;
			this._mode = Mode.None;
			this._activeTool = null;
			this.wallsLayer.preview.sortableChildren = false;
		}
	}
	toggleCubic(enabled) {
		this.setMode(enabled, Mode.Cube);
		this._activeTool = new CubicTool();
	}
	toggleQuadratic(enabled) {
		this.setMode(enabled, Mode.Quad);
		this._activeTool = new QuadTool();
	}
	toggleCircle(enabled) {
		this.setMode(enabled, Mode.Circ);
		this._activeTool = new CircleTool();
	}
	apply() {
		return __awaiter(this, void 0, void 0, function* () {
			if (!this.activeTool || this.activeTool.mode != ToolMode.Placed)
				return;
			yield Wall.create(this.walls.map(e => e.data), {});
			this.clearTool();
		});
	}
	clearTool() {
		if (!this._activeTool)
			return;
		this._activeTool.clearTool();
		this.walls = [];
		this.wallsLayer.preview.removeChildren();
		this.render();
	}
	injectControls(controls) {
		const curveTools = [
			{
				name: MODE_NAMES[Mode.Cube],
				title: "df-curvy-walls.cubic",
				icon: 'fas fa-bezier-curve',
				onClick: (toggled) => this.toggleCubic(toggled),
				toggle: true
			},
			{
				name: MODE_NAMES[Mode.Quad],
				title: "df-curvy-walls.quadratic",
				icon: 'fas fa-project-diagram',
				onClick: (toggled) => this.toggleQuadratic(toggled),
				toggle: true
			},
			{
				name: MODE_NAMES[Mode.Circ],
				title: "df-curvy-walls.circle",
				icon: 'fas fa-circle',
				onClick: (toggled) => this.toggleCircle(toggled),
				toggle: true
			}
		];
		const tools = controls.find(e => e.name === 'walls').tools;
		tools.splice(tools.findIndex(e => e.name === 'clone') + 1, 0, ...curveTools);
		// We are only called when we first load, or if the user left and came back
		// Clear all of our state when that happens
		this._mode = Mode.None;
		this._activeTool = null;
		this.walls = [];
	}
	static _onDragLeftStart(event) {
		const self = BezierControl.instance;
		if (self.mode == Mode.None || self.activeTool == null)
			return self.wallsLayer.dfWallCurves_onDragLeftStart(event);
		self.currentHandler = self.activeTool.checkPointForDrag(event.data.origin);
		if (self.currentHandler == null)
			return;
		self.currentHandler.start(event.data.origin, event.data.destination, event);
		self.render();
	}
	static _onDragLeftMove(event) {
		const self = BezierControl.instance;
		if (self.mode == Mode.None || !self.currentHandler)
			return self.wallsLayer.dfWallCurves_onDragLeftMove(event);
		self.currentHandler.move(event.data.origin, event.data.destination, event);
		self.render();
	}
	static _onDragLeftDrop(event) {
		const self = BezierControl.instance;
		if (self.mode == Mode.None || !self.currentHandler)
			return self.wallsLayer.dfWallCurves_onDragLeftDrop(event);
		self.currentHandler.stop(event.data.origin, event.data.destination, event);
		self.currentHandler = null;
		self.render();
	}
	static _onDragLeftCancel(event) {
		const self = BezierControl.instance;
		if (self.mode == Mode.None)
			return self.wallsLayer.dfWallCurves_onDragLeftCancel(event);
		else if (!self.currentHandler)
			return;
		self.currentHandler.cancel();
		self.currentHandler = null;
		self.render();
	}
	render() {
		var _a;
		this.wallsLayer.preview.removeChildren();
		if (this.activeTool == null)
			return;
		const points = (_a = this.activeTool) === null || _a === void 0 ? void 0 : _a.getSegments(this.segments);
		if (points.length == 0)
			return;
		this.walls.length;
		const wallData = this.wallsLayer._getWallDataFromActiveTool(game.activeTool);
		while (this.walls.length > points.length - 1) {
			const wall = this.walls.pop();
			this.wallsLayer.preview.removeChild(wall);
		}
		for (var c = 0; c < points.length - 1; c++) {
			const data = duplicate(wallData);
			data.c = [points[c].x, points[c].y, points[c + 1].x, points[c + 1].y];
			if (c == this.walls.length) {
				this.walls.push(new Wall(data, undefined));
				this.wallsLayer.preview.addChild(this.walls[c]);
				this.walls[c].draw();
			}
			else {
				this.walls[c].data = data;
				this.wallsLayer.preview.addChild(this.walls[c]);
				this.walls[c].refresh();
			}
		}
		const graphics = new PIXI.Graphics(null);
		this.wallsLayer.preview.addChild(graphics);
		this.activeTool.drawHandles(graphics);
	}
	patchWallsLayer() {
		const layer = canvas.getLayer("WallsLayer");
		this.wallsLayer = layer;
		this.wallsLayer.dfWallCurves_onDragLeftStart = this.wallsLayer._onDragLeftStart;
		this.wallsLayer.dfWallCurves_onDragLeftMove = this.wallsLayer._onDragLeftMove;
		this.wallsLayer.dfWallCurves_onDragLeftDrop = this.wallsLayer._onDragLeftDrop;
		this.wallsLayer.dfWallCurves_onDragLeftCancel = this.wallsLayer._onDragLeftCancel;
		this.wallsLayer._onDragLeftStart = BezierControl._onDragLeftStart;
		this.wallsLayer._onDragLeftMove = BezierControl._onDragLeftMove;
		this.wallsLayer._onDragLeftDrop = BezierControl._onDragLeftDrop;
		this.wallsLayer._onDragLeftCancel = BezierControl._onDragLeftCancel;
		window.addEventListener('keydown', this.inputManager.onKeyDown.bind(this.inputManager));
		window.addEventListener('keyup', this.inputManager.onKeyUp.bind(this.inputManager));
		Hooks.on('requestCurvyWallsRedraw', () => {
			this.render();
		});
	}
	static findControl(name) {
		return ui.controls.controls.find(e => e.name === name);
	}
	static findTool(name, control) {
		if (control != undefined)
			return ui.controls.controls.find(e => e.name === control).tools.find(e => e.name === name);
		for (var c = 0; c < ui.controls.controls.length; c++) {
			const control = ui.controls.controls[c];
			const tool = control.tools.find(e => e.name === name);
			if (tool != undefined)
				return tool;
		}
		return undefined;
	}
}
class KeyboardInputManager {
	constructor() {
		this._currentKeys = new Set();
	}
	onKeyDown(event) {
		const key = game.keyboard.getKey(event);
		if (key in ["Enter", "Delete", "Backspace", "-", "="])
			return;
		if (this._currentKeys.size == 0)
			return;
		this._currentKeys.add(key);
	}
	onKeyUp(event) {
		const key = game.keyboard.getKey(event);
		if (key in this._currentKeys)
			return;
		event.preventDefault();
		switch (key) {
			case "Enter":
				BezierControl.instance.apply();
				break;
			case "Delete":
			case "Backspace":
				BezierControl.instance.clearTool();
				break;
			case "-":
				BezierControl.instance.segments--;
				break;
			case "=":
				BezierControl.instance.segments++;
				break;
		}
		this._currentKeys.clear();
	}
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
