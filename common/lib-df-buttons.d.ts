// Generated by "bundle-dts@1.1.4" https://github.com/fishen/bundle-dts#readme."
/**
* Tool Configuration for tools that appear on the secondary bar when their
* parent group is active.
*/
declare interface Tool {
	/** Unique name ID of the Tool */
	name: string;
	/** Plain Text or a Localization Key */
	title: string;
	/** HTMLElement to be used as an icon */
	icon: string;
	/**
	* (default: false) If true, the tool will act as a simple button.
	* Must implement {@link onClick}
	*/
	button?: boolean | false;
	/**
	* (default: false) If true, the tool will act as a toggle button.
	* Must implement {@link onClick}
	*/
	toggle?: boolean | false;
	/**
	* (default: undefined) If {@link toggle} is true, this holds the toggle
	* button's state
	*/
	active?: boolean | undefined;
	/**
	* (default: true) Sets the visibility of the tool. Can be a function or a
	* boolean value
	*/
	visible?: () => boolean | boolean | true;
	/**
	* A click handler that is invoked when ever the tool is pressed. This
	* function is given an `active` state when either the default Radial or set
	* as a toggle button.
	*
	* If the Handler is unbound, it will be bound to the {@link Tool} instance it belongs to.
	*
	* - Radial Button (default): Invoked with `active:false` when deactivated, or `active:true` when activated.
	* - Toggle Button: Invoked with the new toggled state (true|false).
	* - Button: Invoked with no parameters.
	*/
	onClick?: (active?: boolean) => void | null | undefined;
}
/**
* A collection of Tools that appear on the main bar
*/
declare interface ToolGroup extends Tool {
	/** {@link Tool} collection */
	tools?: Tool[];
	/**
	* {@link Tool.name} of tool to be active. Defaults to the first tool in
	* the {@link tools} list.
	*/
	activeTool?: string;
}
/** Manages the button UI, Hooks, and User Interactions. */
declare interface ControlManager {
	/** Complete list of {@link ToolGroup} objects. */
	groups: ToolGroup[];
	/** Name of currently active {@link ToolGroup}. */
	activeGroupName: string;
	/** Name of the currently active {@link Tool}. */
	get activeToolName(): string;
	/** The currently active {@link ToolGroup} object. */
	get activeGroup(): ToolGroup;
	/** The currently active {@link Tool} object. */
	get activeTool(): Tool;
	/**
	* Activates a {@link ToolGroup} by its unique name.
	* @param groupName Name of the group to be activated.
	*/
	activateGroupByName(groupName: string): void;
	/**
	* Activates a {@link Tool} inside the given {@link ToolGroup} via their unique names.
	* @param groupName Name of group that contains the {@link Tool}.
	* @param toolName Name of the {@link Tool} to be activated.
	* @param activateGroup (Default true) Also activate the {@link ToolGroup}.
	*/
	activateToolByName(groupName: string, toolName: string, activateGroup?: boolean): void;
	/** Reload the module buttons bar by rebuilding the {@link ToolGroup}s and rerendering. */
	reloadModuleButtons(): void;
}
/**
Hooks.on('getModuleToolGroups', (app: ControlManager, groups: ToolGroup[]) => {
	const handleClick = function (this: Tool, active?: boolean) {
		if (active !== undefined)
			console.log(`${this.name}: active=${active}`);
		else
			console.log(this.name);
	};
	groups.push({
		name: 'radial1',
		icon: '<i class="fas fa-dice-one"></i>',
		title: 'radial1',
		onClick: handleClick,
		tools: [
			{ name: 'tool1-1', title: 'tool1-1', onClick: handleClick, icon: '<i class="fas fa-dice-one"></i>' },
			{ name: 'tool1-2', title: 'tool1-2', onClick: handleClick, icon: '<i class="fas fa-dice-one"></i>' },
			{ name: 'tool1-3', title: 'tool1-3', onClick: handleClick, icon: '<i class="fas fa-dice-one"></i>', button: true },
			{ name: 'tool1-4', title: 'tool1-4', onClick: handleClick, icon: '<i class="fas fa-dice-one"></i>', toggle: true },
		]
	});
	groups.push({
		name: 'radial2',
		icon: '<i class="fas fa-dice-two"></i>',
		title: 'radial2',
		onClick: handleClick,
		tools: [
			{ name: 'tool2-1', title: 'tool2-1', onClick: handleClick, icon: '<i class="fas fa-dice-two"></i>' },
			{ name: 'tool2-2', title: 'tool2-2', onClick: handleClick, icon: '<i class="fas fa-dice-two"></i>' },
			{ name: 'tool2-3', title: 'tool2-3', onClick: handleClick, icon: '<i class="fas fa-dice-two"></i>', button: true },
			{ name: 'tool2-4', title: 'tool2-4', onClick: handleClick, icon: '<i class="fas fa-dice-two"></i>', toggle: true },
		]
	});
	groups.push({
		name: 'radial3',
		icon: '<i class="fas fa-dice-three"></i>',
		title: 'radial3',
		onClick: handleClick,
		tools: [
			{ name: 'tool3-1', title: 'tool3-1', onClick: handleClick, icon: '<i class="fas fa-dice-three"></i>' },
			{ name: 'tool3-2', title: 'tool3-2', onClick: handleClick, icon: '<i class="fas fa-dice-three"></i>' },
			{ name: 'tool3-3', title: 'tool3-3', onClick: handleClick, icon: '<i class="fas fa-dice-three"></i>', button: true },
			{ name: 'tool3-4', title: 'tool3-4', onClick: handleClick, icon: '<i class="fas fa-dice-three"></i>', toggle: true },
		]
	});
	groups.push({
		name: 'button1',
		icon: '<i class="fas fa-dice-one"></i>',
		title: 'button1',
		button: true,
		onClick: handleClick,
	});
	groups.push({
		name: 'button2',
		icon: '<i class="fas fa-dice-two"></i>',
		title: 'button2',
		button: true,
		onClick: handleClick,
	});

	groups.push({
		name: 'toggle1',
		icon: '<i class="fas fa-dice-one"></i>',
		title: 'toggle1',
		toggle: true,
		onClick: handleClick,
	});
	groups.push({
		name: 'toggle2',
		icon: '<i class="fas fa-dice-two"></i>',
		title: 'toggle2',
		toggle: true,
		active: true,
		onClick: handleClick,
	});
});
/**/ 
